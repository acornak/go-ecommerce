{{ template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}
<h2 class="mt-3 text-center">Virtual Terminal</h2>
<hr>

<div class="alert alert-danger text-center d-none" id="card-messages"></div>

<form 
    action="/payment-succeeded"
    method="post"
    name="charge_form"
    id="charge-form"
    class="d-block needs-validation charge-form"
    autocomplete="off"
    novalidate=""
>
    <div class="mb-3">
        <label for="amount" class="form-label">
            Amount
        </label>
        <input
            type="text"
            class="form-control"
            id="amount"
            name="amount"
            required=""
            autocomplete="">
    </div>
    <div class="mb-3">
        <label for="cardholder-name" class="form-label">
            Cardholder Name
        </label>
        <input
            type="text"
            class="form-control"
            id="cardholder-name"
            name="cardholder_name"
            required=""
            autocomplete="">
    </div>
    <div class="mb-3">
        <label for="cardholder-email" class="form-label">
            Cardholder Email
        </label>
        <input
            type="email"
            class="form-control"
            id="cardholder-email"
            name="cardholder_email"
            required=""
            autocomplete="">
    </div>
    <div class="mb-3">
        <label for="card-element" class="form-label">
            Credit Card
        </label>
        <div id="card-element" class="form-control"></div>
        <div id="card-errors" class="alert-danger text-center" role="alert"></div>
        <div id="card-success" class="alert-success text-center" role="alert"></div>
    </div>

    <hr>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onClick="val()">
        Charge Card
    </a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <input type="hidden" name="payment_intent" id="payment-intent">
    <input type="hidden" name="payment_method" id="payment-method">
    <input type="hidden" name="payment_amount" id="payment-amount">
    <input type="hidden" name="payment_currency" id="payment-currency">

</form>


{{end}}

{{define "js"}}

    <script src="https://js.stripe.com/v3/"></script>
    <script>
        const stripe = Stripe("{{index .StringMap "publishable_key"}}");
        const cardMessages = document.getElementById("card-messages");
        const payBtn = document.getElementById("pay-button");
        const processing = document.getElementById("processing-payment");
        
        let card;

        function hidePayBtn() {
            payBtn.classList.add("d-none");
            processing.classList.remove("d-none");
        };

        function showPayBtn() {
            payBtn.classList.remove("d-none");
            processing.classList.add("d-none");
        };

        function showCardError(msg) {
            cardMessages.classList.add("alert-danger");
            cardMessages.classList.remove("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = msg;
        };

        function showCardSuccess() {
            cardMessages.classList.remove("alert-danger");
            cardMessages.classList.add("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = "Transaction successful";
        };
        
        function val() {
            let form = document.getElementById("charge-form");

            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return
            };

            form.classList.add("was-validated");
            hidePayBtn();

            let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100);

            let payload = {
                amount: amountToCharge,
                currency: "eur",
            };

            const requestOptions = {
                method: "post",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload),
            };

            fetch("{{.API}}/v1/api/payment-intent", requestOptions)
                .then(response => response.text())
                .then(response => {
                    let data;
                    try {
                        data = JSON.parse(response);
                        stripe.confirmCardPayment(data.client_secret, {
                            payment_method: {
                                card: card,
                                billing_details: {
                                    name: document.getElementById("cardholder-name").value,
                                }
                            }
                        }).then(function(res) {
                            if (res.error) {
                                showCardError(res.error.message);
                                showPayBtn();
                            } else if (res.paymentIntent) {
                                if (res.paymentIntent.status === "succeeded") {
                                    document.getElementById("payment-method").value = res.paymentIntent.payment_method_types[0];
                                    document.getElementById("payment-intent").value = res.paymentIntent.id;
                                    document.getElementById("payment-amount").value = res.paymentIntent.amount;
                                    document.getElementById("payment-currency").value = res.paymentIntent.currency;
                                    processing.classList.add("d-none");
                                    showCardSuccess();
                                    document.getElementById("charge-form").submit();
                                }
                            }
                        })
                    } catch (err) {
                        console.log(err);
                        showCardError("Invalid response from payment gateway");
                        showPayBtn();
                    }
                })
        }

        (function() {
            const elements = stripe.elements();
            const style = {
                base: {
                    fontSize: "16px",
                    lineHeight: "24px",
                }
            };

            card = elements.create("card", {
                style: style,
                hidePostalCode: true,
            });
            card.mount("#card-element");

            card.addEventListener("change", function(e) {
                let displayError = document.getElementById("card-errors");
                if (e.error) {
                    displayError.classList.remove("d-none");
                    displayError.textContent = e.error.message;
                } else {
                    displayError.classList.add("d-none");
                    displayError.textContent = "";
                }
            });
        })();

    </script>

{{end}}